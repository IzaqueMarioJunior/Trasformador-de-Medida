from flask import Flask, request, jsonify, render_template_string

app = Flask(__name__)

# Dicionários de conversão
fatores_comprimento = {
    'Milímetro': 0.001,
    'Centímetro': 0.01,
    'Metro': 1,
    'Decâmetro': 10,
    'Quilômetro': 1000,
    'Polegada': 0.0254,
}

fatores_volume = {
    'Mililitro': 0.001,
    'Litro': 1,
}

fatores_tempo = {
    'Segundos': 1,
    'Minuto': 60,
    'Horas': 3600,
}

fatores_energia = {
    'Joule': 1,
    'Quilojoule': 1000,
    'Caloria': 4.184,
}

categorias = {
    'comprimento': fatores_comprimento,
    'volume': fatores_volume,
    'tempo': fatores_tempo,
    'energia': fatores_energia,
}

# Geração dinâmica de todas as unidades
todas_unidades = {}
for cat, unidades in categorias.items():
    todas_unidades.update(unidades)

# Página principal com formulário
@app.route('/', methods=['GET', 'POST'])
def home():
    resultado = ''
    if request.method == 'POST':
        try:
            valor = float(request.form.get('valor'))
            de = request.form.get('de')
            para = request.form.get('para')
            fatores = detectar_categoria(de, para)

            if fatores:
                em_base = valor * fatores[de]
                convertido = em_base / fatores[para]
                resultado = f'{valor} {de} = {convertido} {para}'
            else:
                resultado = f'Conversão de "{de}" para "{para}" não suportada ou unidades incompatíveis.'
        except Exception as e:
            resultado = 'Erro: dados inválidos.'

    # Gera HTML
    opcoes = ''.join(f'<option value="{u}">{u}</option>' for u in todas_unidades.keys())
    html = f'''
    <html>
    <head>
        <title>Conversor de Medidas</title>
        <style>
            body {{
                background-color: #121212;
                color: white;
                font-family: Arial, sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                margin: 0;
            }}
            .container {{
                background-color: #1e1e1e;
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
                width: 100%;
                max-width: 400px;
                text-align: center;
            }}
            input, select {{
                width: 100%;
                padding: 10px;
                margin: 10px 0;
                border-radius: 5px;
                border: none;
                font-size: 16px;
            }}
            input[type="submit"] {{
                background-color: #2196f3;
                color: white;
                cursor: pointer;
                transition: background 0.3s;
            }}
            input[type="submit"]:hover {{
                background-color: #0b7dda;
            }}
            .resultado {{
                margin-top: 20px;
                font-weight: bold;
                font-size: 18px;
                color: #00e676;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h2>Conversor de Medidas</h2>
            <form method="post">
                <label>Valor:</label>
                <input type="number" step="any" name="valor" required>

                <label>De:</label>
                <select name="de" required>{opcoes}</select>

                <label>Para:</label>
                <select name="para" required>{opcoes}</select>

                <input type="submit" value="Converter">
            </form>
            {'<div class="resultado">' + resultado + '</div>' if resultado else ''}
        </div>
    </body>
    </html>
    '''
    return render_template_string(html)

# Detectar a categoria da unidade
def detectar_categoria(unidade1, unidade2):
    for nome_categoria, fatores in categorias.items():
        if unidade1 in fatores and unidade2 in fatores:
            return fatores
    return None

if __name__ == '__main__':
    print(">> Servidor Flask rodando...")
    app.run(debug=True)
